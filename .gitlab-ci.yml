---
image: docker:19.03.1

services:
  - docker:19.03.1-dind

cache:
  key: ${CI_COMMIT_REF_SLUG}

before_script:
  - apk add --update bash wget ca-certificates openssl git tar openssh-client curl ansible ansible-lint
  - docker login registry.u-hopper.com -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: "tcp://docker:2375"
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - test
  - push
  - deploy
  - notify

build_prod:
  stage: build
  script:
    - ./docker-support/runner.sh -bs $CI_COMMIT_TAG
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  only:
    - tags

test_prod:
  stage: test
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t $CI_COMMIT_TAG
  dependencies:
    - build_prod
  only:
    - tags

push_prod:
  stage: push
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p $CI_COMMIT_TAG
  dependencies:
    - build_prod
    - test_prod
  only:
    - tags


notify_prod:
  stage: notify
  script:
    - export RELEASE_TAG="$CI_COMMIT_TAG"
    - export BUILD_ENVIRONMENT="prod"
    - export DEPLOY_TRIGGERED=no
    - ansible-playbook ansible/notify.yml
  dependencies:
    - build_prod
    - test_prod
    - push_prod
  allow_failure: true
  only:
    - tags

build_dev:
  stage: build
  script:
    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  only:
    - develop

test_dev:
  stage: test
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t latest
  dependencies:
    - build_dev
  only:
    - develop

push_dev:
  stage: push
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p latest
  dependencies:
    - build_dev
    - test_dev
  only:
    - develop

deploy_dev:
  stage: deploy
  script:
    - export GIT_REF="develop"
    - ansible-playbook ansible/trigger.yml
  dependencies:
    - build_dev
    - test_dev
    - push_dev
  only:
    - develop

notify_dev:
  stage: notify
  script:
    - export RELEASE_TAG="latest"
    - export BUILD_ENVIRONMENT="dev"
    - export DEPLOY_TRIGGERED=yes
    - ansible-playbook ansible/notify.yml
  dependencies:
    - build_dev
    - test_dev
    - push_dev
    - deploy_dev
  allow_failure: true
  only:
    - develop

build_issue:
  stage: build
  script:
    - ./docker-support/runner.sh -bs latest
  artifacts:
    paths:
      - docker_image.tar.gz
    expire_in: 1 day
  when: manual
  allow_failure: false
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i

test_issue:
  stage: test
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -t latest
  dependencies:
    - build_issue
  allow_failure: false
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i

push_issue:
  stage: push
  script:
    - docker load -i docker_image.tar.gz
    - ./docker-support/runner.sh -p latest
  dependencies:
    - build_issue
    - test_issue
  allow_failure: false
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i

deploy_issue:
  stage: deploy
  script:
    - export GIT_REF="develop"
    - ansible-playbook ansible/trigger.yml
  dependencies:
    - build_issue
    - test_issue
    - push_issue
  allow_failure: false
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i

notify_issue:
  stage: notify
  script:
    - export RELEASE_TAG="latest"
    - export BUILD_ENVIRONMENT="issue"
    - export DEPLOY_TRIGGERED=yes
    - ansible-playbook ansible/notify.yml
  dependencies:
    - build_issue
    - test_issue
    - push_issue
    - deploy_issue
  allow_failure: true
  only:
    - /^feature.*$/i
    - /^hotfix.*$/i
    - /^milestone.*$/i

